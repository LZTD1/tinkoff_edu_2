/*
 * This file is generated by jOOQ.
 */

package edu.java.domain.jooq.tables;

import edu.java.domain.jooq.tables.tables.Databasechangeloglock;
import edu.java.domain.jooq.tables.tables.Links;
import edu.java.domain.jooq.tables.tables.Users;
import edu.java.domain.jooq.tables.tables.UsersLinks;
import edu.java.domain.jooq.tables.tables.records.DatabasechangeloglockRecord;
import edu.java.domain.jooq.tables.tables.records.LinksRecord;
import edu.java.domain.jooq.tables.tables.records.UsersLinksRecord;
import edu.java.domain.jooq.tables.tables.records.UsersRecord;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DatabasechangeloglockRecord> DATABASECHANGELOGLOCK_PKEY = Internal.createUniqueKey(
        Databasechangeloglock.DATABASECHANGELOGLOCK,
        DSL.name("databasechangeloglock_pkey"),
        new TableField[] {Databasechangeloglock.DATABASECHANGELOGLOCK.ID},
        true
    );
    public static final UniqueKey<LinksRecord> LINKS_PKEY =
        Internal.createUniqueKey(Links.LINKS, DSL.name("links_pkey"), new TableField[] {Links.LINKS.ID}, true);
    public static final UniqueKey<LinksRecord> UNIQUE_LINK =
        Internal.createUniqueKey(Links.LINKS, DSL.name("unique_link"), new TableField[] {Links.LINKS.LINK}, true);
    public static final UniqueKey<UsersRecord> UNIQUE_TELEGRAMID = Internal.createUniqueKey(Users.USERS,
        DSL.name("unique_telegramid"),
        new TableField[] {Users.USERS.TELEGRAMID},
        true
    );
    public static final UniqueKey<UsersRecord> USERS_PKEY =
        Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] {Users.USERS.ID}, true);
    public static final UniqueKey<UsersLinksRecord> USERS_LINKS_PKEY = Internal.createUniqueKey(UsersLinks.USERS_LINKS,
        DSL.name("users_links_pkey"),
        new TableField[] {UsersLinks.USERS_LINKS.USERID, UsersLinks.USERS_LINKS.LINKID},
        true
    );

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<UsersLinksRecord, LinksRecord> USERS_LINKS__FK_RELLINK_LINKID =
        Internal.createForeignKey(UsersLinks.USERS_LINKS,
            DSL.name("fk_rellink_linkid"),
            new TableField[] {UsersLinks.USERS_LINKS.LINKID},
            Keys.LINKS_PKEY,
            new TableField[] {Links.LINKS.ID},
            true
        );
    public static final ForeignKey<UsersLinksRecord, UsersRecord> USERS_LINKS__FK_RELUSER_USERID =
        Internal.createForeignKey(UsersLinks.USERS_LINKS,
            DSL.name("fk_reluser_userid"),
            new TableField[] {UsersLinks.USERS_LINKS.USERID},
            Keys.USERS_PKEY,
            new TableField[] {Users.USERS.ID},
            true
        );
}
