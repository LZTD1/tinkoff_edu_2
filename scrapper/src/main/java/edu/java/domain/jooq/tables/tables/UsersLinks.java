/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.tables.tables;


import edu.java.domain.jooq.tables.Keys;
import edu.java.domain.jooq.tables.Public;
import edu.java.domain.jooq.tables.tables.records.UsersLinksRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersLinks extends TableImpl<UsersLinksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.users_links</code>
     */
    public static final UsersLinks USERS_LINKS = new UsersLinks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersLinksRecord> getRecordType() {
        return UsersLinksRecord.class;
    }

    /**
     * The column <code>public.users_links.userid</code>.
     */
    public final TableField<UsersLinksRecord, Long> USERID = createField(DSL.name("userid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.users_links.linkid</code>.
     */
    public final TableField<UsersLinksRecord, Long> LINKID = createField(DSL.name("linkid"), SQLDataType.BIGINT.nullable(false), this, "");

    private UsersLinks(Name alias, Table<UsersLinksRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsersLinks(Name alias, Table<UsersLinksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.users_links</code> table reference
     */
    public UsersLinks(String alias) {
        this(DSL.name(alias), USERS_LINKS);
    }

    /**
     * Create an aliased <code>public.users_links</code> table reference
     */
    public UsersLinks(Name alias) {
        this(alias, USERS_LINKS);
    }

    /**
     * Create a <code>public.users_links</code> table reference
     */
    public UsersLinks() {
        this(DSL.name("users_links"), null);
    }

    public <O extends Record> UsersLinks(Table<O> child, ForeignKey<O, UsersLinksRecord> key) {
        super(child, key, USERS_LINKS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UsersLinksRecord> getPrimaryKey() {
        return Keys.USERS_LINKS_PKEY;
    }

    @Override
    public List<ForeignKey<UsersLinksRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USERS_LINKS__FK_RELUSER_USERID, Keys.USERS_LINKS__FK_RELLINK_LINKID);
    }

    private transient Users _users;
    private transient Links _links;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.USERS_LINKS__FK_RELUSER_USERID);

        return _users;
    }

    /**
     * Get the implicit join path to the <code>public.links</code> table.
     */
    public Links links() {
        if (_links == null)
            _links = new Links(this, Keys.USERS_LINKS__FK_RELLINK_LINKID);

        return _links;
    }

    @Override
    public UsersLinks as(String alias) {
        return new UsersLinks(DSL.name(alias), this);
    }

    @Override
    public UsersLinks as(Name alias) {
        return new UsersLinks(alias, this);
    }

    @Override
    public UsersLinks as(Table<?> alias) {
        return new UsersLinks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersLinks rename(String name) {
        return new UsersLinks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersLinks rename(Name name) {
        return new UsersLinks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersLinks rename(Table<?> name) {
        return new UsersLinks(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
